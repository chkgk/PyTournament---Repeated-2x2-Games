import random
import argparse

# Allows easy generation of strategies driven by 
# probability.
# Usage: python strategy_creator.py 1 0.8 0.4 0 a my_strat_name
# Given numbers have to be between 0 and 1 and represent
# the probability of "a" in the next move depending on the
# last round. If the last round resulted in "ab" ("a" from you
# and "b" from your opponent) then the second number gives the
# probability with which this strategy will play "a" in the next round.
# 1. number corresponds to "aa"
# 2. number corresponds to "ab"
# 3. number corresponds to "ba"
# 4. number corresponds to "bb"
# The letter afterwards is the move in the first round and the 
# name - well, take a guess.
#

class Strategy:
	def __init__(self, p1, p2, p3, p4, first_move):
		self.p1 = self.check_p(p1)
		self.p2 = self.check_p(p2)
		self.p3 = self.check_p(p3)
		self.p4 = self.check_p(p4)
		if first_move != "a" and first_move != "b":
			raise "Illeagel first_move. Only 'a' or 'b' allowed!"
		self.first_move = first_move
	
	def check_p(self, p):
		if p >= 0 and p <= 1:
			return p
		raise "Invalid probability: " + str(p)
	
	def move(self, game, player, history):
		if len(history) == 0:
			return self.first_move

		prob = 0
		last_round = history[-1][0] + history[-1][1]	
		
		if last_round == "aa":
			prob = self.p1
		elif last_round == "ab":
			prob = self.p2
		elif last_round == "ba":
			prob = self.p3
		elif last_round == "bb":
			prob = self.p4
		else: 
			raise "Illegal last move: " + last_round

		if prob >= random.random():
			return "a"
		else:
			return "b"

#################### Main ####################
def write_to_disk(string, path):
	f = open(path, "w")
	f.write(string)
	f.close()
	
if __name__ == "__main__":
	parser = argparse.ArgumentParser()
	parser.add_argument("probabilities", nargs=4, type=float)
	parser.add_argument("first_move", type=str)
	parser.add_argument("name", type=str)
	args = parser.parse_args()

	strategy = \
"""# Generated by strategy_creator.
# Requires strategy_creator to run.
import strategy_creator
class """ + args.name + """:
	def __init__(self):
		self.move = strategy_creator.Strategy(""" +\
		str(args.probabilities[0]) + ", " + \
		str(args.probabilities[1]) + ", " + \
		str(args.probabilities[2]) + ", " + \
		str(args.probabilities[3]) + ", " + \
		"'" + args.first_move + "'" + \
		""").move
"""
	write_to_disk(strategy, "./strategies/" + args.name + ".py")

